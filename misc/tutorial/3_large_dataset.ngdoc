@ngdoc overview
@name Tutorial: Large Dataset
@description

This grid example uses a data set of 10,000 records.

Demonstrates the following:
<ul>
   <li>binding complex column properties on Address.City.</li>
   <li>same field can be listed twice in the grid with a different name</li>
   <li>using field instead of name for backwards compatibility with 2.x</li>
 </ul>

@example
<example module="app">
  <file name="app.js">
    var app = angular.module('app', ['ui.grid']);

    app.controller('MainCtrl', ['$scope', '$http', function ($scope, $http) {
      $scope.gridOptions = {  };

      $scope.gridOptions.columnDefs = [
        {name:'id'},
        {name:'name', enableCellEdit: true},
        {field:'age', enableCellEdit: true}, // showing backwards compatibility with 2.x.  you can use field in place of name
        {name: 'City', field:'address.city', enableCellEdit: true},
        {name: 'State', field:'address.state', enableCellEdit: true},
        {name: 'Name2', field:'name', enableCellEdit: true},
        {name: 'Age2', field:'age', enableCellEdit: true},
        {name: 'City2', field:'address.city', enableCellEdit: true},
        {name: 'State2', field:'address.state', enableCellEdit: true},
        {name: 'Name3', field:'name', enableCellEdit: true},
        {name: 'Age3', field:'age', enableCellEdit: true},
        {name: 'City3', field:'address.city', enableCellEdit: true},
        {name: 'State3', field:'address.state', enableCellEdit: true}
      ];

      $http.get('/data/50000_complex.json')
        .success(function(data) {
          $scope.gridOptions.data = data;
        });
    }]);
  </file>
  <file name="index.html">
    <div ng-controller="MainCtrl">
      <strong>Data Length:</strong> {{ gridOptions.data.length | number }}
      <br>
      <br>
      <div ui-grid="gridOptions" class="grid"></div>
    </div>
  </file>
  <file name="main.css">
    .grid {
      width: 1000px;
      height: 800px;
    }
  </file>
</example>